### Starting build.
# Target: state_test.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:state_test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules state_test.ml > state_test.ml.depends
# Target: ai.mli.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules ai.mli > ai.mli.depends
# Target: types.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:types.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules types.ml > types.ml.depends
# Target: types.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o types.cmo types.ml
# Target: command.mli.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules command.mli > command.mli.depends
# Target: grid_3d.mli.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:mli, file:grid_3d.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules grid_3d.mli > grid_3d.mli.depends
# Target: parse_init.mli.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:mli, file:parse_init.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules parse_init.mli > parse_init.mli.depends
# Target: parse_init.cmi, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:mli, file:parse_init.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o parse_init.cmi parse_init.mli
# Target: gui.mli.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:mli, file:gui.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules gui.mli > gui.mli.depends
# Target: state.mli.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules state.mli > state.mli.depends
# Target: command.cmi, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o command.cmi command.mli
# Target: grid_3d.cmi, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:mli, file:grid_3d.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o grid_3d.cmi grid_3d.mli
# Target: state.cmi, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o state.cmi state.mli
# Target: ai.cmi, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o ai.cmi ai.mli
# Target: gui.cmi, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:mli, file:gui.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o gui.cmi gui.mli
# Target: state_test.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:state_test.cmo, file:state_test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o state_test.cmo state_test.ml
# Target: ai.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:ai.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules ai.ml > ai.ml.depends
# Target: command.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules command.ml > command.ml.depends
# Target: grid_3d.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:grid_3d.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules grid_3d.ml > grid_3d.ml.depends
# Target: gui.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:gui.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules gui.ml > gui.ml.depends
# Target: parse_init.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:parse_init.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules parse_init.ml > parse_init.ml.depends
# Target: state.ml.depends, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -modules state.ml > state.ml.depends
# Target: ai.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:ai.cmo, file:ai.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o ai.cmo ai.ml
+ ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o ai.cmo ai.ml
File "ai.ml", line 202, characters 2-164:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
Leaf::_
# Target: command.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o command.cmo command.ml
# Target: grid_3d.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:grid_3d.cmo, file:grid_3d.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o grid_3d.cmo grid_3d.ml
+ ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o grid_3d.cmo grid_3d.ml
File "grid_3d.ml", line 145, characters 2-1612:
Warning 8: this pattern-matching is not exhaustive.
All clauses in this pattern-matching are guarded.
# Target: gui.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:gui.cmo, file:gui.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o gui.cmo gui.ml
+ ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o gui.cmo gui.ml
File "gui.ml", line 383, characters 2-718:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
((2, 0, 3)|(2, 1, 3)|(2, 2, 3)|(2, 3, _)|(1, 0, 3)|(1, 1, 3)|(1, 2, 3)|
(1, 3, _)|(0, 0, 3)|(0, 1, 3)|(0, 2, 3)|(0, 3, _)|(3, _, _))
# Target: parse_init.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:parse_init.cmo, file:parse_init.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o parse_init.cmo parse_init.ml
+ ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o parse_init.cmo parse_init.ml
File "parse_init.ml", line 24, characters 4-115:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
""
# Target: state.cmo, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o state.cmo state.ml
+ ocamlfind ocamlc -c -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg -o state.cmo state.ml
File "state.ml", line 49, characters 4-5:
Warning 11: this match case is unused.
File "state.ml", line 52, characters 6-11:
Warning 26: unused variable check.
File "state.ml", line 55, characters 4-5:
Warning 11: this match case is unused.
File "state.ml", line 111, characters 4-5:
Warning 11: this match case is unused.
# Target: state_test.byte, tags: { package(ANSITerminal), package(CAMLImages), package(CAMLImages.jpeg), package(CAMLImages.png), package(Graphics), package(YOJSon), package(oUnit), package(str), byte, dont_link_with, extension:byte, file:state_test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package oUnit -package YOJSon -package str -package ANSITerminal -package Graphics -package CAMLImages -package CAMLImages.png -package CAMLImages.jpeg types.cmo parse_init.cmo grid_3d.cmo command.cmo state.cmo ai.cmo gui.cmo state_test.cmo -o state_test.byte
# Compilation successful.
